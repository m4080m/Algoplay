{
    "title": "너비 우선 탐색 (BFS)",
    "steps": [
      {
        "text": "BFS는 그래프 탐색 알고리즘 중 하나로, 시작 노드에서 가까운 순서대로 탐색합니다. 어떤 방식으로 탐색이 이루어지는지 확인해볼까요?",
        "state": 1
      },
      {
        "text": "오른쪽 화면에서 불이 들어온 노드를 클릭해보세요.",
        "state": 2
      },
      {
        "text": "다음으로 선택할 수 있는 노드는 시작 노드에서 한 칸만큼 떨어져있는 노드입니다.",
        "state": 3
      },
      {
        "text": "다음은 두 칸만큼 떨어져있는 노드들,",
        "state": 4
      },
      {
        "text": "다음은 세 칸... 이런 식으로 노드들을 탐색합니다. 계속 진행해볼까요?",
        "state": 5
      },
      {
        "text": "(4/6)",
        "state": 6
      },
      {
        "text": "(5/6)",
        "state": 7
      },
      {
        "text": "(6/6)",
        "state": 8
      },
      {
        "text": "다음과 같이 탐색이 완료되었습니다. 여기서 알 수 있는 점은 무엇일까요?",
        "state": 9
      },
      {
        "text": "앞서 설명했듯이 BFS는 시작 노드에서 가까운 노드부터 탐색 범위를 넓혀갑니다. 연못에 물결이 퍼지는 모양으로 생각할 수 있지요.",
        "state": 10
      },
      {
        "text": "이때 각 노드마다 방문했을 때의 깊이를 나타내보면, 이는 시작 노드부터 해당 노드까지의 최단 거리와 동일합니다! 만약 더욱 짧은 최단 경로가 존재했다면 탐색 과정 도중 이미 그 경로를 통해 해당 노드를 방문했을 것이기 때문이죠.",
        "state": 11
      },
      {
        "text": "따라서 BFS는 시작 노드에서 다른 모든 노드까지의 최단 경로를 구하는 알고리즘이라고도 할 수 있습니다.",
        "state": 12
      },
      {
        "text": "일반적으로 BFS를 구현할 땐 큐(Queue)라는 자료구조를 사용합니다. 큐는 먼저 들어온 원소가 먼저 나가는 선입선출(FIFO) 방식의 자료구조입니다.",
        "state": 13
      },
      {
        "text": "큐의 가장 앞에서 현재 탐색할 노드의 번호를 꺼낸 뒤, 그 노드에 연결된 노드들을 모두 살펴보며 방문하지 않은 노드라면 큐의 맨 뒤에 삽입합니다.",
        "state": 13
      },
      {
        "text": "구현할 때 주의할 점으로는 각 노드의 방문 여부를 확인하는 시점과 기록하는 시점을 확실히 해야 한다는 것입니다. 만약 새로운 노드를 찾아 큐에 넣는 동시에 방문 여부를 기록해놓지 않는다면 다른 노드에서 이 노드를 다시 방문하는 경우 큐에 중복으로 들어가게 됩니다.",
        "state": 13
      },
      {
        "text": "사실 들어가기에 앞서 설명하지 않았던 조건이 있는데, 바로 모든 간선의 길이(가중치)가 동일한 경우에만 사용할 수 있다는 점입니다. 만약에 각 간선의 길이가 다르다면 어떻게 될까요?",
        "state": 13
      },
      {
        "text": "다음 배울 내용인 다익스트라(Dijkstra) 알고리즘에서 해결해봅시다!",
        "state": 14
      }
    ]
  } 